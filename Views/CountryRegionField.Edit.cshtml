@model Elvodora.Fields.CountryRegion.ViewModels.EditCountryRegionFieldViewModel
@using Elvodora.Fields.CountryRegion.Settings;
@using OrchardCore.ContentManagement.Metadata.Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@{
    // Accessing the settings from the PartFieldDefinition.Settings. 
    var settings = Model.PartFieldDefinition.GetSettings<CountryRegionFieldSettings>();

    var serializedSettings = new JsonSerializerSettings(){ContractResolver = new CamelCasePropertyNamesContractResolver()};
    var country = JsonConvert.SerializeObject(Model.Country, serializedSettings);
    var selectedRegions = JsonConvert.SerializeObject(Model.Regions, serializedSettings);
    var partName = Model.PartFieldDefinition.PartDefinition.Name;    
    var fieldName = Model.PartFieldDefinition.Name;
    var countryUrl = "/api/elvodora/countries";
    var regionUrl = "/api/elvodora/regions";
    var vueElementId = $"CountryRegion_{partName}_{fieldName}_{Guid.NewGuid().ToString("n")}";
    var multiple = settings.SelectRegion ==  SelectRegionOption.Multi.ToString() ? "true" : "false";
    var showRegion = settings.SelectRegion ==  SelectRegionOption.None.ToString() ? "false" : "true";
}

<script asp-name="vue-multiselect-country-region" asp-src="~/Elvodora.Fields/Scripts/vue-multiselect-country-region.js" at="Foot" depends-on="vuejs, vue-multiselect"></script>
<style asp-name="vue-multiselect-country-region" asp-src="~/Elvodora.Fields/Styles/vue-multiselect-country-region.css" depends-on="vue-multiselect"></style>

@* data-xxxx atributes are used to set data to vue-multiselect-country-region.js via initVueMultiselectCountryRegion function *@
<div id="@vueElementId" 
        data-country="@country" data-selected-regions="@selectedRegions" 
        data-country-url="@countryUrl" data-region-url="@regionUrl" data-show-region="@showRegion">
    <fieldset class="form-group CountryRegionFieldEditor">
        <legend>@Model.PartFieldDefinition.DisplayName()</legend>
        <div class="w-xl-50 vue-multiselect">
            <label asp-for="CountryCode">@T["Selected Country"]</label>
            <input asp-for="CountryCode" type="hidden" v-model="selectedCountryCode" />
            <vue-multiselect v-model="countryValue" deselect-label="@T["Can't remove this country"]"
                             track-by="code" label="name" placeholder="@T["Select a one country"]"
                             :options="countryOptions" :taggable="true" :allow-empty="false"
                             :multiple="false" :close-on-select="true"
                             @@select="onSelectCountry" >
            </vue-multiselect>
        </div>
        <div v-show=showRegion class="w-xl-50 vue-multiselect">
            <label asp-for="RegionCodes">@T["Selected Regions"]</label>
            <input asp-for="RegionCodes" type="hidden" v-model="selectedRegionCodes" />
            <vue-multiselect v-model="regionValue" :options="regionOptions" track-by="code" label="name" 
                             placeholder="@T["Select regions of the country"]" :multiple=@multiple 
                             select-label="@T["Select a region"]" deselect-label="@T["Remove region"]"
                             :taggable="true" :allow-empty="false"
                             :searchable="true" :close-on-select="true">
            </vue-multiselect>
        </div>
        @if (!string.IsNullOrEmpty(settings.Hint))
        {
            <span class="hint CountryRegionFieldEditor__hint">@settings.Hint</span>
        }
    </fieldset>
</div>

<script at="Foot" depends-on="vue-multiselect-country-region">
    initVueMultiselectCountryRegion(document.querySelector("#@vueElementId"))
</script>

